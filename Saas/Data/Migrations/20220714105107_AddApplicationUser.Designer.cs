// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Saas.Data;

#nullable disable

namespace Saas.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20220714105107_AddApplicationUser")]
    partial class AddApplicationUser
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Saas.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "b44ce1a0-06a9-4123-ad57-7cd458485ddc",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a550385f-27f5-47d6-9715-97c754ab240e",
                            Email = "admin@saas.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@SAAS.COM",
                            NormalizedUserName = "ADMIN@SAAS.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAECdHbFmJUrpwqvXXXPouK/taz+boBdhWheMz7e5nF5urd46DicUx4rWZ5Nuglwo+jA==",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "UWFNILQ466TSZJV2LLK3K4TXLIFX7ZNS",
                            TwoFactorEnabled = false,
                            UserName = "admin@saas.com"
                        });
                });

            modelBuilder.Entity("Saas.Models.Datalink", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<bool>("Active")
                        .HasColumnType("bit")
                        .HasColumnOrder(5);

                    b.Property<string>("ConnectionString")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(4);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(2);

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Datalinks", "sas");

                    b.HasData(
                        new
                        {
                            Id = "f63f4ca8-2c92-41bf-8918-ee18e80580af",
                            Active = true,
                            ConnectionString = "Data Source=(localdb)\\mssqllocaldb;Database=saasTenantsShared;Integrated Security=True;MultipleActiveResultSets=True",
                            Name = "defaultSharedDatalink",
                            Provider = "mssql"
                        },
                        new
                        {
                            Id = "d976e7ea-58da-4e9c-8d4f-765e9160bd73",
                            Active = true,
                            ConnectionString = "Data Source=(localdb)\\mssqllocaldb;Database=saasTenantAlpha;Integrated Security=True;MultipleActiveResultSets=True",
                            Name = "alphaDatalink",
                            Provider = "mssql"
                        },
                        new
                        {
                            Id = "ed5b0fe5-ea64-43df-b315-fe4f39734eb1",
                            Active = true,
                            ConnectionString = "Data Source=(localdb)\\mssqllocaldb;Database=saasTenantBeta;Integrated Security=True;MultipleActiveResultSets=True",
                            Name = "betaDatalink",
                            Provider = "mssql"
                        },
                        new
                        {
                            Id = "d9da83f1-19ae-48be-a1ab-e141861ea8e9",
                            Active = true,
                            ConnectionString = "",
                            Name = "charlieDatalink",
                            Provider = "mssql"
                        });
                });

            modelBuilder.Entity("Saas.Models.Tenant", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(1);

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(6);

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(3);

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(5);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnOrder(2);

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Tenants", "sas");

                    b.HasData(
                        new
                        {
                            Id = "e895cc49-3266-44a0-0f8e-08da5ed157b0",
                            Comment = "This Tenant is for testing purposes only and is not a guenuine company.",
                            Created = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3343),
                            Description = "Test Tenant called Alpha",
                            Name = "Alpha",
                            Updated = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3377)
                        },
                        new
                        {
                            Id = "e7600b12-0c8a-41f1-0f8f-08da5ed157b0",
                            Comment = "This Tenant is for testing purposes only and is not a guenuine company.",
                            Created = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3381),
                            Description = "Test Tenant called Beta",
                            Name = "Beta",
                            Updated = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3383)
                        },
                        new
                        {
                            Id = "3eeb9e55-2dea-4e60-0f90-08da5ed157b0",
                            Comment = "This Tenant is for testing purposes only and is not a guenuine company.",
                            Created = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3385),
                            Description = "Test Tenant called Charlie",
                            Name = "Charlie",
                            Updated = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3387)
                        },
                        new
                        {
                            Id = "3694cda0-b999-4920-0f91-08da5ed157b0",
                            Comment = "This Tenant is for testing purposes only and is not a guenuine company.",
                            Created = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3396),
                            Description = "Test Tenant called Delta",
                            Name = "Delta",
                            Updated = new DateTime(2022, 7, 14, 20, 51, 6, 993, DateTimeKind.Local).AddTicks(3398)
                        });
                });

            modelBuilder.Entity("Saas.Models.TenantDatalink", b =>
                {
                    b.Property<string>("TenantId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2);

                    b.Property<string>("DatalinkId")
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(3);

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("TenantDatalinkID")
                        .HasColumnOrder(1);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.HasKey("TenantId", "DatalinkId");

                    b.HasIndex("DatalinkId");

                    b.ToTable("TenantDatalinks", "sas");

                    b.HasData(
                        new
                        {
                            TenantId = "e895cc49-3266-44a0-0f8e-08da5ed157b0",
                            DatalinkId = "d976e7ea-58da-4e9c-8d4f-765e9160bd73",
                            Id = 1
                        },
                        new
                        {
                            TenantId = "e7600b12-0c8a-41f1-0f8f-08da5ed157b0",
                            DatalinkId = "ed5b0fe5-ea64-43df-b315-fe4f39734eb1",
                            Id = 2
                        },
                        new
                        {
                            TenantId = "3eeb9e55-2dea-4e60-0f90-08da5ed157b0",
                            DatalinkId = "d9da83f1-19ae-48be-a1ab-e141861ea8e9",
                            Id = 3
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Saas.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Saas.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Saas.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Saas.Models.TenantDatalink", b =>
                {
                    b.HasOne("Saas.Models.Datalink", "Datalink")
                        .WithMany()
                        .HasForeignKey("DatalinkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Saas.Models.Tenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Datalink");

                    b.Navigation("Tenant");
                });
#pragma warning restore 612, 618
        }
    }
}
